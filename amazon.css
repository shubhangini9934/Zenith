* {
    margin: 0;
    font-family: Arial;
    border: border-box;
}
.navbar {
    height: 60px;
    background-color: #0f1111;
    color: rgb(187, 172, 172);
    display: flex;
    justify-content: space-evenly;
}
.nav-logo{
    height: 50px;
    width: 100px;
    align-items: center;
}
.logo {
    background-image: url(5.jpeg);
    background-size: cover;
    height: 50px;
    width: 100px;
}
.border {
    border: 2px solid transparent;
}
.border:hover {
    border: 1.5px solid white;
}
/** box2 **/
  .add-1 {
      color: #cccccc;
      font-size: 1rem;
      margin-left: 15px;

  }
  .add-2 {
      font-size: 1rem;
      margin-left: 3px;
  }
  .add-icon {
    display: flex;
    align-items: center;
  }
  /**box3**/
  .nav-search {
    display: flex;
    justify-content: space-evenly;
    background-color: pink;
    width: 620px;
    height: 40px;
    border-radius: 4px;
  }
  .search-select {
    background-color: #f3f3f3;
    width: 50px;
    text-align: center;
    border-bottom-left-radius: 4px;
    border: none;
  }
  .search-input{
     width: 500px;
     font-size: 1rem;
     border: none;
  }
  .search-icon {
    width: 45px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.2rem;
    background-color: #febd68; 
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
    color: #0f1111;
  }

  .nav-search:hover {
    border: 2px solid orange;
  }
  /**box4**/
  span{
    font-size: 0.7rem;
    display: inline;
  }

  .nav-sec{
    font-size: 0.85;
    font-weight: 700;
    display: inline;
  }

  /**box5**/
.nav-cart {
    font-size: 30px; 
}
.nav-cart{
      font-size: 0.85rem;
      font-weight: 700; 
}
/* js code */
async function generateResponse(aiChatBox) {
  let text = aiChatBox.querySelector(".ai-chat-area");

  let requestBody = {
    "contents": [
      {
        "parts": [
          { "text": user.message }
        ]
      }
    ]
  };

  // Correctly add file if it exists
  if (user.file && user.file.data) {
    requestBody.contents[0].parts.push({ "inline_data": user.file.data }); 
  }

  let requestOptions = {
    method: "POST",
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(requestBody)
  };

  try {
    let response = await fetch(Api_Url, requestOptions);

    if (!response.ok) {
      //Handle non-2xx responses
      const errorData = await response.json().catch(() => ({error: "Invalid JSON response"})); //Attempt to parse JSON, fallback to default error
      console.error("API Error:", response.status, response.statusText, errorData);  // Log both status, text and error details
      text.innerHTML = `Error: ${response.status} - ${response.statusText} ${errorData.error?` - ${errorData.error}`:''}`; //Show user-friendly error
      return; //Prevent further execution
    }


    let data = await response.json();
    let apiResponse = data.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, "$1").trim();
    text.innerHTML = apiResponse;
  } catch (error) {
    console.error("Fetch Error:", error);
    text.innerHTML = "Error communicating with the API.";  //Provide user feedback in case of error
  } finally {
    chatContainer.scrollTo({ top: chatContainer.scrollHeight, behavior: "smooth" });
    image.src = `img.svg`;
    image.classList.remove("choose");
    user.file = {};
  }
}